<?php/* * 观察者模式（发布-订阅模式） */interface ISubscribe {    abstract public function update(IPublisher $pub);}interface IPublisher {    abstract public function attach(ISubscribe $sub);    abstract public function detach(ISubscribe $sub);    abstract public function notify();}abstract class Publisherable implements IPublisher{    protected $subList = array();        public function notify(){        foreach ($this->subList as $sub) {            $sub->update($this);        }    }        public function attach(ISubscribe $sub){        $key = array_search($sub, $this->subList);        if (false === $key) {            $this->subList[] = $sub;        }    }        public function detach(ISubscribe $sub){        $key = array_search($sub, $this->subList);        if (false !== $key) {            unset($key);        }    }}//发布者示例class PublisherDemo extends Publisherable{    private $property;        public function setProperty($property){        $this->property = $property;        $this->notify();    }        public function getProperty(){        return $this->property;    }}//订阅者示例class SubscribeDemo implements ISubscribe {    private $id;        public function __construct($id){        $this->id = $id;    }        public function update(IPublisher $pub){        echo "id = {$this->id}, catched the property value: " . $pub->getProperty() . "\r\n";    }}$publ = new PublisherDemo();$publ->attach(new SubscribeDemo('#0'));$publ->attach(new SubscribeDemo('#1'));$publ->attach(new SubscribeDemo('#2'));$publ->attach(new SubscribeDemo('#3'));$publ->setProperty('HHHHHHHH');/**RESULT: * id = #0, catched the property value: HHHHHHHH * id = #1, catched the property value: HHHHHHHH * id = #2, catched the property value: HHHHHHHH * id = #3, catched the property value: HHHHHHHH */